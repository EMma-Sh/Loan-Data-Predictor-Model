# -*- coding: utf-8 -*-
"""Loan Prediction Approval.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZFfqiBw6m6wkFB1CyQfRmXLm_MDv0oVp
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import joblib

df = pd.read_csv("Loan.csv")
print(df.head())

for col in ['Gender', 'Married', 'Dependents', 'Self_Employed', 'Credit_History', 'Loan_Amount_Term']:
    if col in df.columns:
        df[col].fillna(df[col].mode()[0], inplace=True)
    else:
        print(f"Warning: Column '{col}' not found in the DataFrame. Skipping imputation for this column.")


if 'LoanAmount' in df.columns:
    df['LoanAmount'].fillna(df['LoanAmount'].median(), inplace=True)
else:
    print("Warning: Column 'LoanAmount' not found in the DataFrame. Skipping imputation for this column.")


cols_to_encode = ['Gender', 'Married', 'Education', 'Self_Employed', 'Property_Area', 'Loan_Status', 'Dependents']
le = LabelEncoder()
for col in cols_to_encode:
    if col in df.columns:
        df[col] = le.fit_transform(df[col])
    else:
        print(f"Warning: Column '{col}' not found in the DataFrame. Skipping encoding for this column.")


try:
    X = df.drop(columns=['Loan_ID', 'Loan_Status'])
    y = df['Loan_Status']

    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

    model = RandomForestClassifier(random_state=42)
    model.fit(X_train, y_train)

    y_pred = model.predict(X_test)

    print("Accuracy:", accuracy_score(y_test, y_pred))
    print("\nClassification Report:\n", classification_report(y_test, y_pred))
    print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))

    joblib.dump(model, 'loan_model.joblib')
    joblib.dump(scaler, 'scaler.joblib')

except KeyError as e:
    print(f"Error: A required column was not found after attempting to drop/select columns for modeling: {e}")
    print("Please ensure that 'Loan_Status' and all features used for X are present in your DataFrame after preprocessing.")

except Exception as e:
    print(f"An unexpected error occurred: {e}")